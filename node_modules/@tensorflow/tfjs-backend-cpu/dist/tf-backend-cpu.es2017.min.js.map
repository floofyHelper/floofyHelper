{"version":3,"file":"tf-backend-cpu.es2017.min.js","sources":["../../../../tfjs-backend-cpu/src/cpu_util.ts","../../../../tfjs-backend-cpu/src/backend_cpu.ts","../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Complex.ts","../../../../tfjs-backend-cpu/src/utils/zeros_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Identity.ts","../../../../tfjs-backend-cpu/src/kernels/Real.ts","../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../tfjs-backend-cpu/src/utils/binary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose.ts","../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-cpu/src/base.ts","../../../../tfjs-backend-cpu/src/kernels/Elu.ts","../../../../tfjs-backend-cpu/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-cpu/src/kernels/Prelu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu6.ts","../../../../tfjs-backend-cpu/src/utils/fused_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Reshape.ts","../../../../tfjs-backend-cpu/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/Acos.ts","../../../../tfjs-backend-cpu/src/kernels/Acosh.ts","../../../../tfjs-backend-cpu/src/kernels/AddN.ts","../../../../tfjs-backend-cpu/src/kernels/All.ts","../../../../tfjs-backend-cpu/src/kernels/Any.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMax.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMin.ts","../../../../tfjs-backend-cpu/src/kernels/Asin.ts","../../../../tfjs-backend-cpu/src/kernels/Asinh.ts","../../../../tfjs-backend-cpu/src/kernels/Atan.ts","../../../../tfjs-backend-cpu/src/kernels/Atan2.ts","../../../../tfjs-backend-cpu/src/kernels/Atanh.ts","../../../../tfjs-backend-cpu/src/utils/pool_utils.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/BatchNorm.ts","../../../../tfjs-backend-cpu/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount.ts","../../../../tfjs-backend-cpu/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-cpu/src/kernels/ClipByValue.ts","../../../../tfjs-backend-cpu/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-cpu/src/kernels/Imag.ts","../../../../tfjs-backend-cpu/src/kernels/Concat.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-cpu/src/kernels/Cos.ts","../../../../tfjs-backend-cpu/src/kernels/Cosh.ts","../../../../tfjs-backend-cpu/src/kernels/CropAndResize.ts","../../../../tfjs-backend-cpu/src/kernels/Cumprod.ts","../../../../tfjs-backend-cpu/src/kernels/Cumsum.ts","../../../../tfjs-backend-cpu/src/kernels/DenseBincount.ts","../../../../tfjs-backend-cpu/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Diag.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2D.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Sum.ts","../../../../tfjs-backend-cpu/src/kernels/Einsum.ts","../../../../tfjs-backend-cpu/src/kernels/EluGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Erf.ts","../../../../tfjs-backend-cpu/src/kernels/ExpandDims.ts","../../../../tfjs-backend-cpu/src/kernels/RealDiv.ts","../../../../tfjs-backend-cpu/src/utils/fft_utils.ts","../../../../tfjs-backend-cpu/src/kernels/FFT.ts","../../../../tfjs-backend-cpu/src/kernels/Fill.ts","../../../../tfjs-backend-cpu/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../../../tfjs-backend-cpu/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2.ts","../../../../tfjs-backend-cpu/src/kernels/IFFT.ts","../../../../tfjs-backend-cpu/src/kernels/IsFinite.ts","../../../../tfjs-backend-cpu/src/kernels/IsInf.ts","../../../../tfjs-backend-cpu/src/kernels/IsNaN.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace.ts","../../../../tfjs-backend-cpu/src/kernels/Log1p.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalNot.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalOr.ts","../../../../tfjs-backend-cpu/src/kernels/LRN.ts","../../../../tfjs-backend-cpu/src/kernels/LRNGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Max.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Mean.ts","../../../../tfjs-backend-cpu/src/kernels/Min.ts","../../../../tfjs-backend-cpu/src/kernels/MirrorPad.ts","../../../../tfjs-backend-cpu/src/kernels/Mod.ts","../../../../tfjs-backend-cpu/src/kernels/Softmax.ts","../../../../tfjs-backend-cpu/src/kernels/Multinomial.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-cpu/src/kernels/OneHot.ts","../../../../tfjs-backend-cpu/src/kernels/ZerosLike.ts","../../../../tfjs-backend-cpu/src/kernels/OnesLike.ts","../../../../tfjs-backend-cpu/src/kernels/Pack.ts","../../../../tfjs-backend-cpu/src/kernels/PadV2.ts","../../../../tfjs-backend-cpu/src/kernels/Pow.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor.ts","../../../../tfjs-backend-cpu/src/kernels/Range.ts","../../../../tfjs-backend-cpu/src/kernels/Reciprocal.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Reverse.ts","../../../../tfjs-backend-cpu/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-cpu/src/kernels/Round.ts","../../../../tfjs-backend-cpu/src/kernels/ScatterNd.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted.ts","../../../../tfjs-backend-cpu/src/kernels/Select.ts","../../../../tfjs-backend-cpu/src/kernels/Selu.ts","../../../../tfjs-backend-cpu/src/kernels/Sign.ts","../../../../tfjs-backend-cpu/src/kernels/Sin.ts","../../../../tfjs-backend-cpu/src/kernels/Sinh.ts","../../../../tfjs-backend-cpu/src/kernels/Softplus.ts","../../../../tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-cpu/src/kernels/SparseToDense.ts","../../../../tfjs-backend-cpu/src/kernels/SplitV.ts","../../../../tfjs-backend-cpu/src/kernels/Square.ts","../../../../tfjs-backend-cpu/src/kernels/Step.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-cpu/src/kernels/Tan.ts","../../../../tfjs-backend-cpu/src/kernels/Tanh.ts","../../../../tfjs-backend-cpu/src/kernels/Tile.ts","../../../../tfjs-backend-cpu/src/kernels/TopK.ts","../../../../tfjs-backend-cpu/src/kernels/Transform.ts","../../../../tfjs-backend-cpu/src/kernels/Unique.ts","../../../../tfjs-backend-cpu/src/kernels/Unpack.ts","../../../../tfjs-backend-cpu/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-cpu/src/register_all_kernels.ts","../../../../tfjs-backend-cpu/src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi, looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, visit https://github.com/tensorflow/tfjs-node for more details. ' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, broadcast_util, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendCPU,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.data.get(s0.dataId).values as TypedArray;\n  const s1Vals = backend.data.get(s1.dataId).values as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'cpu',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clipByValue = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clipByValue,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumprod(\n    args: {inputs: CumprodInputs, backend: MathBackendCPU,\n           attrs: CumprodAttrs}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumprod');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumprod in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeOnesTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 1 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] * vals[prevIdx] :\n                                aVals[idx] * vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'cpu',\n  kernelFunc: cumprod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coordX = Math.round(imageWidth - col - 1);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    // For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned\n    // to the channel of the conv2d's result; if the bias is a scalar, the\n    // bias_add is computed as if the bias was broadcasted to the shape of the\n    // conv2d's result.\n    if (dataFormat === 'NCHW' && bias.shape.length === 1 &&\n        bias.shape[0] !== 1) {\n      const reshapedBias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      result =\n          add({inputs: {a: result, b: reshapedBias}, backend}) as TensorInfo;\n      backend.disposeIntermediateTensorInfo(reshapedBias);\n    } else {\n      // This condition handles NHWC and NCHW (scalar case). The only other case\n      // for NCHW (1D case) is handled above.\n      result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    // For NCHW format, if PReLu activation weights is a 1-D tensor, it is\n    // supposed to be aligned with the channel of the conv2d's result. For other\n    // cases, whether NCHW or NHWC data format, the conv2d result is\n    // already aligned with the activation weights.\n    if (dataFormat === 'NCHW' && activation === 'prelu' &&\n        preluActivationWeights.shape.length === 1 &&\n        preluActivationWeights.shape[0] !== 1) {\n      const reshapedAlpha = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      result = applyActivation(\n          backend, result, activation, reshapedAlpha, leakyreluAlpha);\n      backend.disposeIntermediateTensorInfo(reshapedAlpha);\n    } else {\n      result = applyActivation(\n          backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.data.get(indices.dataId).values as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], dtype, res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedTensorToTensorImpl} from './RaggedTensorToTensor_impl';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.data.get(shape.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values as TypedArray;\n  const $rowPartitionValues = rowPartitionTensors.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImpl(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'cpu',\n  kernelFunc: raggedTensorToTensor as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(indices);\n  const updatesBuf = backend.bufferSync<Rank, 'int32'|'float32'>(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction lowerBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] < value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nfunction upperBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] <= value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nexport function searchSortedImpl(\n    sortedInputs: TypedArray, values: TypedArray, batchSize: number,\n    numInputs: number, numValues: number, side: 'left'|'right'): TypedArray {\n  const output =\n      util.getArrayFromDType('int32', batchSize * numValues) as TypedArray;\n  for (let b = 0; b < batchSize; ++b) {\n    const sortedInputsSlice =\n        sortedInputs.slice(b * numInputs, (b + 1) * numInputs);\n    const outputOffset = b * numValues;\n    for (let i = 0; i < numValues; ++i) {\n      output[outputOffset + i] = side === 'left' ?\n          lowerBound(sortedInputsSlice, values[i + outputOffset]) :\n          upperBound(sortedInputsSlice, values[i + outputOffset]);\n    }\n  }\n  return output;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {searchSortedImpl} from './SearchSorted_impl';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendCPU,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const $sortedSequence =\n      backend.data.get(sortedSequence.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n\n  const output = searchSortedImpl(\n      $sortedSequence, $values, sortedSequence.shape[0],\n      sortedSequence.shape[1], values.shape[1], side);\n  return backend.makeTensorInfo(values.shape, 'int32', output);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'cpu',\n  kernelFunc: searchSorted as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n\n  let outBuf;\n  switch (sparseValues.dtype) {\n    case 'bool': {\n      const updatesBuf = backend.bufferSync<Rank, 'bool'>(sparseValues);\n      const $defaultValue =\n          Boolean(backend.data.get(defaultValue.dataId).values[0]);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'float32': {\n      const updatesBuf = backend.bufferSync<Rank, 'float32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'int32': {\n      const updatesBuf = backend.bufferSync<Rank, 'int32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'string': {\n      const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n      const $defaultValue = util.decodeString(\n          backend.data.get(defaultValue.dataId).values[0] as Uint8Array);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    default:\n      throw new Error(`Unsupported type ${sparseValues.dtype}`);\n  }\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const inStrides = util.computeStrides(image.shape);\n  const batchInStride = inStrides[0];\n  const rowInStride = inStrides[1];\n  const colInStride = inStrides[2];\n\n  const outStrides = util.computeStrides(outShape);\n  const batchOutStride = outStrides[0];\n  const rowOutStride = outStrides[1];\n  const colOutStride = outStrides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchOutStride + outY * rowOutStride +\n              outX * colOutStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {dilation2DBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2DBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  dilation2DBackpropFilterConfig,\n  dilation2DBackpropInputConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.20.0';\nexport {version};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","constructor","super","this","data","DataStorage","engine","nextDataId","write","values","shape","firstUse","env","get","backend_util","warn","dataId","id","set","refCount","makeTensorInfo","outId","length","isString","encodedValues","map","d","encodeString","has","incRef","decRef","move","numDataIds","async","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","bufferSync","strings","decodeString","buffer","Error","makeOutput","makeTensorFromTensorInfo","disposeData","force","delete","disposeIntermediateTensorInfo","tensorInfo","f","start","now","kernelMs","memory","unreliable","reasons","where","condition","condVals","dispose","floatPrecision","epsilon","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","identityConfig","Identity","input","realVal","realConfig","Real","castImpl","inputType","Int32Array","from","zero","toTypedArray","resultData","resultShape","a","b","cast","attrs","zerosTensorInfo","floatX","realPart","hasEncodingLoss","resultType","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","add","Add","addConfig","bincountImpl","xVals","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","Ceil","ceilConfig","concatImpl","outShape","simplyConcat","offset","colOffset","decodedData","tIdx","row","resIdx","col","equalImpl","equal","Equal","equalConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","Expm1","expm1Config","floorImpl","floor","Floor","floorConfig","gatherNdImpl","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","strides","paramsShape","paramsSize","index","flattenIndex","dim","push","k","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greater","Greater","greaterConfig","greaterEqualImpl","greaterEqual","GreaterEqual","greaterEqualConfig","lessImpl","less","Less","lessConfig","lessEqualImpl","lessEqual","LessEqual","lessEqualConfig","linSpaceImpl","stop","num","step","logImpl","log","Log","logConfig","maxImpl","reduceSize","max","Number","isNaN","maximumImpl","aValue","bValue","maximum","Maximum","maximumConfig","minimumImpl","min","minimum","Minimum","minimumConfig","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqual","NotEqual","notEqualConfig","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","getInnerMostAxes","expandShapeToKeepDim","RowPartitionType","RaggedTensorToTensorOp","shapeShape","valuesShape","valuesDType","defaultValue","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","rowPartitionTypes","getRowPartitionTypesHelper","raggedRank","getRaggedRank","getRowPartitionTypeByDimension","dimension","FIRST_DIM_SIZE","getRowPartitionTensor","getMaxWidth","rowPartitionTensor","VALUE_ROWIDS","getMaxWidthValueRowID","ROW_SPLITS","getMaxWidthRowSplit","static","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","tensorShapeFromTensor","tShape","isPartial","makeShape","calculateOutputSize","firstDim","valueShape","validateDefaultValueShape","combineRaggedTensorToTensorShapes","calculateFirstParentOutputIndex","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","calculateOutputIndexRowSplit","parentOutputIndex","outputSize","rowSplitSize","rowLength","realLength","parentOutputIndexCurrent","calculateOutputIndexValueRowID","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","calculateOutputIndex","partitionType","getFirstDimensionSize","firstPartitionTensor","firstPartitionType","compute","multiplier","outputShape","outputTensor","outputIndex","setOutput","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape","tidy","defaultValueTensor","reshape","bCastDefault","broadcastTo","dataSync","srcStart","dstStart","dstEnd","srcI","dstI","src","subarray","copyArray","fill","dst","out","raggedTensorToTensorImpl","shapesShape","rangeImpl","numElements","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","scatterImpl","indices","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","rank","sigmoidImpl","sigmoid","Sigmoid","sigmoidConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","parseSliceParams","assertParamsValid","sliceConfig","Slice","sparseFillEmptyRowsImpl","indicesShape","indicesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","sparseSegmentReductionImpl","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","output","end","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","sqrtImpl","Sqrt","sqrtConfig","squaredDifferenceImpl","diff","squaredDifference","SquaredDifference","squaredDifferenceConfig","stridedSliceImpl","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","splits","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","stringNGramsImpl","dataSplits","split","delimiters","skipEmpty","delimiter","indexOf","token","tokenStart","stringSplitImpl","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","stringToHashBucketFastImpl","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImpl","subComplexImpl","sub","Sub","subConfig","tileImpl","reps","comparePair","valueDiff","select","array","left","right","z","s","sd","sign","swap","topKImpl","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","join","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","applyActivation","activation","preluActivationWeights","leakyreluAlpha","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","bias","current","addRes","activationRes","intermediates","acos","Acos","acosConfig","acosh","Acosh","acoshConfig","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asin","Asin","asinConfig","asinh","Asinh","asinhConfig","atan","Atan","atanConfig","atan2Impl","atan2","Atan2","atan2Config","atanh","Atanh","atanhConfig","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","initialValue","NEGATIVE_INFINITY","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","clipByValue","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipByValueConfig","complexAbsConfig","ComplexAbs","complexVals","hypot","imagVal","imagConfig","Imag","computeOutShape","$inputs","filter","shapes","assertParamsConsistent","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cos","Cos","cosConfig","cosh","Cosh","coshConfig","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumprodConfig","Cumprod","exclusive","reverse","permutedAxis","resultDtype","makeOnesTypedArray","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","cumsumConfig","Cumsum","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2DConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2DBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2DBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","splice","eluGradConfig","EluGrad","v","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","erfConfig","$dim","expandDimsConfig","ExpandDims","realDivImpl","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","e","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","coordX","outIdx","outputValue","floorDivImpl","floorDiv","FloorDiv","floorDivConfig","fusedConv2DConfig","FusedConv2D","resultOld","reshapedBias","reshapedAlpha","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","prepareAndValidate","gatherV2Config","GatherV2","batchDims","parsedAxis","indicesVals","axisDim","$batchDims","indicesSize","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","ifftConfig","IFFT","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","Infinity","isInfConfig","IsNan","isNaNConfig","linSpaceConfig","LinSpace","log1p","Log1p","log1pConfig","logicalAndImpl","logicalAnd","LogicalAnd","logicalAndConfig","logicalNot","LogicalNot","logicalNotConfig","logicalOrImpl","logicalOr","LogicalOr","logicalOrConfig","LRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","pow","LRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","mirrorPadConfig","MirrorPad","paddings","mode","coords","inIndex","modImpl","rem","mod","Mod","modConfig","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom","alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powImpl","Pow","powConfig","raggedTensorToTensorConfig","RaggedTensorToTensor","rowPartitionTensors","$values","$defaultValue","$rowPartitionValues","rangeConfig","Range","reciprocal","Reciprocal","reciprocalConfig","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","getImageCenter","sinFactor","sin","cosFactor","coordY","Round","base","roundConfig","scatterNdConfig","ScatterNd","calculateShapes","lowerBound","mid","upperBound","searchSortedConfig","SearchSorted","sortedSequence","side","sortedInputs","numInputs","numValues","sortedInputsSlice","searchSortedImpl","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","selu","Selu","seluConfig","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$denseShape","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputData","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","Boolean","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","squareConfig","Square","Step","stepAttrs","NaN","stepConfig","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","sliced","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","tileConfig","Tile","topKConfig","TopK","transformConfig","Transform","transforms","interpolation","fillMode","inStrides","batchInStride","rowInStride","colInStride","outStrides","batchOutStride","rowOutStride","colOutStride","transformVals","transform","outY","outX","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","batchStride","rowStride","colStride","yFloor","xFloor","yCeil","xCeil","uniqueConfig","Unique","unpackConfig","Unpack","valueRank","tempRes","unsortedSegmentSumConfig","UnsortedSegmentSum","numSegments","numIters","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfigs","kernelConfig","registerKernel"],"mappings":"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AI,GACAoB,GACAzK,GACAkL,GACAkB,GACAgB,GACAG,GACA3xB,EACAiE,EACAsuB,GACAn0B,EACAo0B,GACAsB,GACAgC,GACAE,GACAU,GACAW,GACAW,GACAmB,GACAU,GACAG,GACAC,GACA6C,GACAY,GACAE,GACAE,GACAoB,GACAE,GACAG,GACAE,GACAE,GACAiB,GACAS,GACAO,GACA5hB,GACAijB,GACAl+B,EACAm/B,GACA/+B,EACAi/B,GACA7+B,EACA6jC,GACAO,GACAE,GACAlkC,EACA4kC,GACAC,GACAK,GACAE,GACAI,GACA9jC,EACAI,GACAhJ,EACAwtC,GACApZ,GACAwZ,GACAI,GACAE,GACAxsB,GACAtY,GACAI,GACA2kC,GACAnkC,GACAukC,GACAI,GACAG,GACAI,GACAC,GACAW,GACAU,GACA7lC,GACA+lC,GACAE,GACAE,GACAK,GACAE,GACAQ,GACAI,GACAjnC,GACAmnC,GACAU,GACAW,GACAnoC,GACAM,GACA6oC,GACAU,GACAK,GACAtpC,GACA8pC,GACAU,GACAM,GACAE,GACAM,GACAx1B,GACA7U,GACAsqC,GACAM,GACA13C,EACA4lC,GACAkS,GACA/1B,GACAG,GACAS,GACAo1B,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAc,GACA/pC,GACAgqC,GACAM,GACAS,GACAU,GACA7qC,GACA+qC,GACAE,GACAG,GACAnqC,GACAq9B,GACAqN,GACAC,GACAQ,GACAK,GACAI,GACAM,GACAE,GACAK,GACAvoC,GACA6oC,GACAxoC,GACA6oC,GACAC,GACAgB,GACAG,GACAI,GACApmC,GACAwkB,GACAgiB,GACAG,GACAC,GACAE,GACAE,GACAh5C,GACAy7C,GACAE,GACAI,GACAjS,IAGF,IAAK,MAAM4S,KAAgBD,GACzBE,iBAAeD,gDCpWD"}